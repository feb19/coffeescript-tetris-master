// Generated by CoffeeScript 1.3.3
(function() {
  var blockHeight, blockWidth, board, canvas, canvases, clearLines, colors, cols, context, current, currentX, currentY, drawBlock, freeze, h, init, keyPress, newShape, render, rotate, rows, shapes, tick, valid, w;

  shapes = [[1, 1, 1, 1], [1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1], [1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 1, 1]];

  colors = ["cyan", "orange", "blue", "yellow", "red", "green", "purple"];

  canvases = document.getElementsByTagName("canvas");

  canvas = canvases[0];

  context = canvas.getContext("2d");

  w = 300;

  h = 600;

  cols = 10;

  rows = 20;

  blockWidth = w / cols;

  blockHeight = h / rows;

  board = [];

  current = [];

  currentX = 0;

  currentY = 0;

  drawBlock = function(x, y) {
    context.fillRect(blockWidth * x, blockHeight * y, blockWidth - 1, blockHeight - 1);
    context.strokeRect(blockWidth * x, blockHeight * y, blockWidth - 1, blockHeight - 1);
  };

  render = function() {
    var x, y, _i, _j, _k, _l;
    context.clearRect(0, 0, w, h);
    context.strokeStyle = "black";
    for (x = _i = 0; _i <= 9; x = ++_i) {
      for (y = _j = 0; _j <= 19; y = ++_j) {
        if (board[y][x]) {
          context.fillStyle = colors[board[y][x] - 1];
          drawBlock(x, y);
        }
      }
    }
    context.fillStyle = "red";
    context.strokeStyle = "black";
    for (y = _k = 0; _k <= 3; y = ++_k) {
      for (x = _l = 0; _l <= 3; x = ++_l) {
        if (current[y][x]) {
          context.fillStyle = colors[current[y][x] - 1];
          drawBlock(currentX + x, currentY + y);
        }
      }
    }
  };

  newShape = function() {
    var i, id, shape, x, y, _i, _j;
    id = Math.floor(Math.random() * shapes.length);
    shape = shapes[id];
    current = [];
    for (y = _i = 0; _i <= 3; y = ++_i) {
      current[y] = [];
      for (x = _j = 0; _j <= 3; x = ++_j) {
        i = 4 * y + x;
        if (typeof shape[i] !== "undefined" && shape[i]) {
          current[y][x] = id + 1;
        } else {
          current[y][x] = 0;
        }
      }
    }
    currentX = 5;
    currentY = 0;
  };

  init = function() {
    var x, y, _i, _ref, _results;
    _results = [];
    for (y = _i = 0, _ref = rows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; y = 0 <= _ref ? ++_i : --_i) {
      board[y] = [];
      _results.push((function() {
        var _j, _ref1, _results1;
        _results1 = [];
        for (x = _j = 0, _ref1 = cols - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          _results1.push(board[y][x] = 0);
        }
        return _results1;
      })());
    }
    return _results;
  };

  tick = function() {
    if (valid(0, 1)) {
      ++currentY;
    } else {
      freeze();
      clearLines();
      newShape();
    }
  };

  freeze = function() {
    var x, y, _i, _j;
    for (y = _i = 0; _i <= 3; y = ++_i) {
      for (x = _j = 0; _j <= 3; x = ++_j) {
        if (current[y][x]) {
          board[y + currentY][x + currentX] = current[y][x];
        }
      }
    }
  };

  rotate = function(current) {
    var newCurrent, x, y, _i, _j;
    newCurrent = [];
    for (y = _i = 0; _i <= 3; y = ++_i) {
      newCurrent[y] = [];
      for (x = _j = 0; _j <= 3; x = ++_j) {
        newCurrent[y][x] = current[3 - x][y];
      }
    }
    return newCurrent;
  };

  clearLines = function() {
    var row, x, y, yy, _i, _j, _k, _l, _ref, _ref1, _ref2;
    for (y = _i = _ref = rows - 1; _ref <= 1 ? _i <= 1 : _i >= 1; y = _ref <= 1 ? ++_i : --_i) {
      row = true;
      for (x = _j = 0, _ref1 = cols - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
        if (board[y][x] === 0) {
          row = false;
          break;
        }
      }
      if (row) {
        for (yy = _k = y; y <= 1 ? _k <= 1 : _k >= 1; yy = y <= 1 ? ++_k : --_k) {
          for (x = _l = 0, _ref2 = cols - 1; 0 <= _ref2 ? _l <= _ref2 : _l >= _ref2; x = 0 <= _ref2 ? ++_l : --_l) {
            board[yy][x] = board[yy - 1][x];
          }
        }
        ++y;
      }
    }
  };

  keyPress = function(key) {
    var rotated;
    switch (key) {
      case "left":
        if (valid(-1)) {
          --currentX;
        }
        break;
      case "right":
        if (valid(1)) {
          ++currentX;
        }
        break;
      case "down":
        if (valid(0, 1)) {
          ++currentY;
        }
        break;
      case "rotate":
        rotated = rotate(current);
        if (valid(0, 0, rotated)) {
          current = rotated;
        }
        break;
    }
  };

  valid = function(offsetX, offsetY, newCurrent) {
    var x, y, _i, _j;
    offsetX = offsetX || 0;
    offsetY = offsetY || 0;
    offsetX = currentX + offsetX;
    offsetY = currentY + offsetY;
    newCurrent = newCurrent || current;
    for (y = _i = 0; _i <= 3; y = ++_i) {
      for (x = _j = 0; _j <= 3; x = ++_j) {
        if (newCurrent[y][x]) {
          if (typeof board[y + offsetY] === "undefined" || typeof board[y + offsetY][x + offsetX] === "undefined" || board[y + offsetY][x + offsetX] || x + offsetX < 0 || y + offsetY >= rows || x + offsetX >= cols) {
            return false;
          }
        }
      }
    }
    return true;
  };

  document.body.onkeydown = function(e) {
    this.keys = {
      37: "left",
      39: "right",
      40: "down",
      38: "rotate"
    };
    if (typeof this.keys[e.keyCode] !== 'undefined') {
      console.log(this.keys[e.keyCode]);
      keyPress(this.keys[e.keyCode]);
      render;

    }
  };

  init();

  newShape();

  setInterval(tick, 250);

  setInterval(render, 30);

}).call(this);
